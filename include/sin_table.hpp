//
// Copyright (c) 2022 Christopher Gassib
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef CLGSINTABLE_HPP
#define CLGSINTABLE_HPP

#ifndef CLGMATH_HPP
  #include "clg_math.hpp"
#endif

namespace clg
{
    // 0 thru pi/2 or (400 samples per 90 degrees)
    constexpr int sinePer90Deg = 400;
    constexpr float sine_table[sinePer90Deg + 1] =
    {
        0.00000000f, 0.00392698f, 0.00785390f, 0.01178070f, 0.01570732f, 0.01963369f,
        0.02355976f, 0.02748547f, 0.03141076f, 0.03533556f, 0.03925982f, 0.04318347f,
        0.04710645f, 0.05102871f, 0.05495018f, 0.05887080f, 0.06279052f, 0.06670927f,
        0.07062699f, 0.07454362f, 0.07845910f, 0.08237337f, 0.08628637f, 0.09019804f,
        0.09410831f, 0.09801714f, 0.10192446f, 0.10583020f, 0.10973431f, 0.11363673f,
        0.11753740f, 0.12143625f, 0.12533323f, 0.12922828f, 0.13312134f, 0.13701234f,
        0.14090123f, 0.14478795f, 0.14867243f, 0.15255463f, 0.15643447f, 0.16031189f,
        0.16418685f, 0.16805927f, 0.17192910f, 0.17579628f, 0.17966075f, 0.18352245f,
        0.18738131f, 0.19123729f, 0.19509032f, 0.19894034f, 0.20278730f, 0.20663112f,
        0.21047176f, 0.21430915f, 0.21814324f, 0.22197397f, 0.22580127f, 0.22962509f,
        0.23344536f, 0.23726204f, 0.24107506f, 0.24488436f, 0.24868989f, 0.25249158f,
        0.25628937f, 0.26008322f, 0.26387305f, 0.26765881f, 0.27144045f, 0.27521790f,
        0.27899111f, 0.28276001f, 0.28652455f, 0.29028468f, 0.29404033f, 0.29779144f,
        0.30153796f, 0.30527983f, 0.30901699f, 0.31274939f, 0.31647697f, 0.32019966f,
        0.32391742f, 0.32763018f, 0.33133789f, 0.33504049f, 0.33873792f, 0.34243013f,
        0.34611706f, 0.34979865f, 0.35347484f, 0.35714559f, 0.36081083f, 0.36447050f,
        0.36812455f, 0.37177293f, 0.37541557f, 0.37905242f, 0.38268343f, 0.38630854f,
        0.38992769f, 0.39354082f, 0.39714789f, 0.40074883f, 0.40434360f, 0.40793212f,
        0.41151436f, 0.41509025f, 0.41865974f, 0.42222277f, 0.42577929f, 0.42932925f,
        0.43287258f, 0.43640924f, 0.43993917f, 0.44346231f, 0.44697862f, 0.45048803f,
        0.45399050f, 0.45748596f, 0.46097437f, 0.46445568f, 0.46792981f, 0.47139674f,
        0.47485639f, 0.47830872f, 0.48175367f, 0.48519120f, 0.48862124f, 0.49204375f,
        0.49545867f, 0.49886595f, 0.50226553f, 0.50565737f, 0.50904142f, 0.51241761f,
        0.51578590f, 0.51914623f, 0.52249856f, 0.52584284f, 0.52917900f, 0.53250700f,
        0.53582679f, 0.53913832f, 0.54244154f, 0.54573639f, 0.54902282f, 0.55230078f,
        0.55557023f, 0.55883111f, 0.56208338f, 0.56532697f, 0.56856185f, 0.57178796f,
        0.57500525f, 0.57821368f, 0.58141318f, 0.58460373f, 0.58778525f, 0.59095771f,
        0.59412106f, 0.59727525f, 0.60042023f, 0.60355594f, 0.60668235f, 0.60979940f,
        0.61290705f, 0.61600525f, 0.61909395f, 0.62217310f, 0.62524266f, 0.62830257f,
        0.63135280f, 0.63439328f, 0.63742399f, 0.64044487f, 0.64345586f, 0.64645694f,
        0.64944805f, 0.65242914f, 0.65540017f, 0.65836109f, 0.66131187f, 0.66425244f,
        0.66718277f, 0.67010281f, 0.67301251f, 0.67591184f, 0.67880075f, 0.68167918f,
        0.68454711f, 0.68740447f, 0.69025124f, 0.69308736f, 0.69591280f, 0.69872750f,
        0.70153143f, 0.70432453f, 0.70710678f, 0.70987812f, 0.71263852f, 0.71538792f,
        0.71812630f, 0.72085360f, 0.72356978f, 0.72627480f, 0.72896863f, 0.73165121f,
        0.73432251f, 0.73698248f, 0.73963109f, 0.74226830f, 0.74489406f, 0.74750833f,
        0.75011107f, 0.75270224f, 0.75528181f, 0.75784973f, 0.76040597f, 0.76295047f,
        0.76548321f, 0.76800415f, 0.77051324f, 0.77301045f, 0.77549574f, 0.77796907f,
        0.78043041f, 0.78287971f, 0.78531693f, 0.78774205f, 0.79015501f, 0.79255579f,
        0.79494435f, 0.79732065f, 0.79968466f, 0.80203633f, 0.80437564f, 0.80670253f,
        0.80901699f, 0.81131898f, 0.81360845f, 0.81588537f, 0.81814972f, 0.82040144f,
        0.82264052f, 0.82486691f, 0.82708057f, 0.82928149f, 0.83146961f, 0.83364491f,
        0.83580736f, 0.83795692f, 0.84009355f, 0.84221723f, 0.84432793f, 0.84642560f,
        0.84851021f, 0.85058175f, 0.85264016f, 0.85468543f, 0.85671752f, 0.85873639f,
        0.86074203f, 0.86273439f, 0.86471344f, 0.86667916f, 0.86863151f, 0.87057047f,
        0.87249601f, 0.87440809f, 0.87630668f, 0.87819176f, 0.88006330f, 0.88192126f,
        0.88376563f, 0.88559637f, 0.88741345f, 0.88921684f, 0.89100652f, 0.89278247f,
        0.89454464f, 0.89629302f, 0.89802758f, 0.89974828f, 0.90145512f, 0.90314805f,
        0.90482705f, 0.90649210f, 0.90814317f, 0.90978024f, 0.91140328f, 0.91301226f,
        0.91460716f, 0.91618796f, 0.91775463f, 0.91930714f, 0.92084548f, 0.92236962f,
        0.92387953f, 0.92537520f, 0.92685660f, 0.92832370f, 0.92977649f, 0.93121493f,
        0.93263902f, 0.93404873f, 0.93544403f, 0.93682491f, 0.93819134f, 0.93954330f,
        0.94088077f, 0.94220373f, 0.94351216f, 0.94480605f, 0.94608536f, 0.94735008f,
        0.94860019f, 0.94983568f, 0.95105652f, 0.95226269f, 0.95345417f, 0.95463095f,
        0.95579301f, 0.95694034f, 0.95807290f, 0.95919069f, 0.96029369f, 0.96138187f,
        0.96245524f, 0.96351376f, 0.96455742f, 0.96558621f, 0.96660010f, 0.96759909f,
        0.96858316f, 0.96955229f, 0.97050647f, 0.97144569f, 0.97236992f, 0.97327916f,
        0.97417339f, 0.97505259f, 0.97591676f, 0.97676588f, 0.97759994f, 0.97841892f,
        0.97922281f, 0.98001160f, 0.98078528f, 0.98154383f, 0.98228725f, 0.98301552f,
        0.98372863f, 0.98442657f, 0.98510933f, 0.98577689f, 0.98642926f, 0.98706641f,
        0.98768834f, 0.98829504f, 0.98888650f, 0.98946271f, 0.99002366f, 0.99056934f,
        0.99109975f, 0.99161487f, 0.99211470f, 0.99259923f, 0.99306846f, 0.99352237f,
        0.99396096f, 0.99438422f, 0.99479214f, 0.99518473f, 0.99556196f, 0.99592385f,
        0.99627038f, 0.99660154f, 0.99691733f, 0.99721775f, 0.99750280f, 0.99777246f,
        0.99802673f, 0.99826561f, 0.99848910f, 0.99869719f, 0.99888987f, 0.99906716f,
        0.99922904f, 0.99937550f, 0.99950656f, 0.99962220f, 0.99972243f, 0.99980724f,
        0.99987663f, 0.99993061f, 0.99996916f, 0.99999229f, 1.00000000f,
    };

    inline constexpr float sin_index(int index)
    {
        if (index <= sinePer90Deg) // [0, 400]
        {
            assert(index >= 0 && index <= sinePer90Deg);
            return sine_table[index];
        }
        else // [401, 800]
        {
            index = sinePer90Deg - (index - sinePer90Deg);
            assert(index >= 0 && index <= sinePer90Deg);
            return sine_table[index];
        }
    }

    inline constexpr float sin_lookup(float rad)
    {
        constexpr float rad_inc = clg::trig<float>::half_pi / sinePer90Deg;
        constexpr float half_inc = rad_inc * 0.5f;
        constexpr float inv_rad_inc = 1.0f / rad_inc;
        int index = static_cast<int>((rad + half_inc) * inv_rad_inc);
        index %= sinePer90Deg * 4;
        if (index <= sinePer90Deg * 2)
        {
            return sin_index(index);
        }
        else
        {
            return -sin_index(index - sinePer90Deg * 2);
        }
    }

    inline constexpr float cos_lookup(float rad)
    {
        constexpr float rad_inc = clg::trig<float>::half_pi / sinePer90Deg;
        constexpr float half_inc = rad_inc * 0.5f;
        constexpr float inv_rad_inc = 1.0f / rad_inc;
        int index = static_cast<int>((rad + half_inc) * inv_rad_inc) + sinePer90Deg;
        index %= sinePer90Deg * 4;
        if (index <= sinePer90Deg * 2)
        {
            return sin_index(index);
        }
        else
        {
            return -sin_index(index - sinePer90Deg * 2);
        }
    }
} // namespace clg

#endif // CLGSINTABLE_HPP
